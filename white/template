// Copyright 2012 The Chroma Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package white

// D65 illuminant conversion functions
// D75_D50 functions
func D75_D50Bradford(xs, ys, zs float64) (xd, yd, zd float64) {
	m := [3][3]float64{
	xd = m[0][0]*xs + m[0][1]*ys + m[0][2]*zs
	yd = m[1][0]*xs + m[1][1]*ys + m[1][2]*zs
	zd = m[2][0]*xs + m[2][1]*ys + m[2][2]*zs
	return
}

func D75_D50vonKries(xs, ys, zs float64) (xd, yd, zd float64) {
	m := [3][3]float64{
	xd = m[0][0]*xs + m[0][1]*ys + m[0][2]*zs
	yd = m[1][0]*xs + m[1][1]*ys + m[1][2]*zs
	zd = m[2][0]*xs + m[2][1]*ys + m[2][2]*zs
	return
}

func D75_D50Xyz(xs, ys, zs float64) (xd, yd, zd float64) {
	m := [3][3]float64{
	xd = m[0][0]*xs + m[0][1]*ys + m[0][2]*zs
	yd = m[1][0]*xs + m[1][1]*ys + m[1][2]*zs
	zd = m[2][0]*xs + m[2][1]*ys + m[2][2]*zs
	return
}

// D75_D55 functions
func D75_D55Bradford(xs, ys, zs float64) (xd, yd, zd float64) {
	m := [3][3]float64{
	xd = m[0][0]*xs + m[0][1]*ys + m[0][2]*zs
	yd = m[1][0]*xs + m[1][1]*ys + m[1][2]*zs
	zd = m[2][0]*xs + m[2][1]*ys + m[2][2]*zs
	return
}

func D75_D55vonKries(xs, ys, zs float64) (xd, yd, zd float64) {
	m := [3][3]float64{
	xd = m[0][0]*xs + m[0][1]*ys + m[0][2]*zs
	yd = m[1][0]*xs + m[1][1]*ys + m[1][2]*zs
	zd = m[2][0]*xs + m[2][1]*ys + m[2][2]*zs
	return
}

func D75_D55Xyz(xs, ys, zs float64) (xd, yd, zd float64) {
	m := [3][3]float64{
	xd = m[0][0]*xs + m[0][1]*ys + m[0][2]*zs
	yd = m[1][0]*xs + m[1][1]*ys + m[1][2]*zs
	zd = m[2][0]*xs + m[2][1]*ys + m[2][2]*zs
	return
}

// D75_D65 functions
func D75_D65Bradford(xs, ys, zs float64) (xd, yd, zd float64) {
	m := [3][3]float64{
	xd = m[0][0]*xs + m[0][1]*ys + m[0][2]*zs
	yd = m[1][0]*xs + m[1][1]*ys + m[1][2]*zs
	zd = m[2][0]*xs + m[2][1]*ys + m[2][2]*zs
	return
}

func D75_D65vonKries(xs, ys, zs float64) (xd, yd, zd float64) {
	m := [3][3]float64{
	xd = m[0][0]*xs + m[0][1]*ys + m[0][2]*zs
	yd = m[1][0]*xs + m[1][1]*ys + m[1][2]*zs
	zd = m[2][0]*xs + m[2][1]*ys + m[2][2]*zs
	return
}

func D75_D65Xyz(xs, ys, zs float64) (xd, yd, zd float64) {
	m := [3][3]float64{
		{1.0069565, 0.0236390, -0.0240510},
		{0.0025966, 0.9981762, -0.0005236},
		{0.0000000, 0.0000000, 0.8878406}}
	xd = m[0][0]*xs + m[0][1]*ys + m[0][2]*zs
	yd = m[1][0]*xs + m[1][1]*ys + m[1][2]*zs
	zd = m[2][0]*xs + m[2][1]*ys + m[2][2]*zs
	return
}

/*
 s/D65_/D75_/g
 s/ /, /g 	


m := [3][3]float64{
		{xx},
		{xx},
		{xx}}
*/

