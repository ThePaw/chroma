// Copyright 2012 The Chroma Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package white
/*
:;    Edit s/FROM/xxx/g	

remove  func FROM_FROM...()  first!
*/

// FROM illuminant conversion functions
// FROM_A functions
func FROM_A_Bradford(xs, ys, zs float64) (xd, yd, zd float64) {
	INSERT_MATRIX_HERE
	xd = m[0][0]*xs + m[0][1]*ys + m[0][2]*zs
	yd = m[1][0]*xs + m[1][1]*ys + m[1][2]*zs
	zd = m[2][0]*xs + m[2][1]*ys + m[2][2]*zs
	return
}

func FROM_A_vonKries(xs, ys, zs float64) (xd, yd, zd float64) {
	INSERT_MATRIX_HERE
	xd = m[0][0]*xs + m[0][1]*ys + m[0][2]*zs
	yd = m[1][0]*xs + m[1][1]*ys + m[1][2]*zs
	zd = m[2][0]*xs + m[2][1]*ys + m[2][2]*zs
	return
}

func FROM_A_Xyz(xs, ys, zs float64) (xd, yd, zd float64) {
	INSERT_MATRIX_HERE
	xd = m[0][0]*xs + m[0][1]*ys + m[0][2]*zs
	yd = m[1][0]*xs + m[1][1]*ys + m[1][2]*zs
	zd = m[2][0]*xs + m[2][1]*ys + m[2][2]*zs
	return
}

// FROM_B functions
func FROM_B_Bradford(xs, ys, zs float64) (xd, yd, zd float64) {
	INSERT_MATRIX_HERE
	xd = m[0][0]*xs + m[0][1]*ys + m[0][2]*zs
	yd = m[1][0]*xs + m[1][1]*ys + m[1][2]*zs
	zd = m[2][0]*xs + m[2][1]*ys + m[2][2]*zs
	return
}

func FROM_B_vonKries(xs, ys, zs float64) (xd, yd, zd float64) {
	INSERT_MATRIX_HERE
	xd = m[0][0]*xs + m[0][1]*ys + m[0][2]*zs
	yd = m[1][0]*xs + m[1][1]*ys + m[1][2]*zs
	zd = m[2][0]*xs + m[2][1]*ys + m[2][2]*zs
	return
}

func FROM_B_Xyz(xs, ys, zs float64) (xd, yd, zd float64) {
	INSERT_MATRIX_HERE
	xd = m[0][0]*xs + m[0][1]*ys + m[0][2]*zs
	yd = m[1][0]*xs + m[1][1]*ys + m[1][2]*zs
	zd = m[2][0]*xs + m[2][1]*ys + m[2][2]*zs
	return
}

// FROM_C functions
func FROM_C_Bradford(xs, ys, zs float64) (xd, yd, zd float64) {
	INSERT_MATRIX_HERE
	xd = m[0][0]*xs + m[0][1]*ys + m[0][2]*zs
	yd = m[1][0]*xs + m[1][1]*ys + m[1][2]*zs
	zd = m[2][0]*xs + m[2][1]*ys + m[2][2]*zs
	return
}

func FROM_C_vonKries(xs, ys, zs float64) (xd, yd, zd float64) {
	INSERT_MATRIX_HERE
	xd = m[0][0]*xs + m[0][1]*ys + m[0][2]*zs
	yd = m[1][0]*xs + m[1][1]*ys + m[1][2]*zs
	zd = m[2][0]*xs + m[2][1]*ys + m[2][2]*zs
	return
}

func FROM_C_Xyz(xs, ys, zs float64) (xd, yd, zd float64) {
	INSERT_MATRIX_HERE
	xd = m[0][0]*xs + m[0][1]*ys + m[0][2]*zs
	yd = m[1][0]*xs + m[1][1]*ys + m[1][2]*zs
	zd = m[2][0]*xs + m[2][1]*ys + m[2][2]*zs
	return
}

// FROM_D50 functions
func FROM_D50_Bradford(xs, ys, zs float64) (xd, yd, zd float64) {
	INSERT_MATRIX_HERE
	xd = m[0][0]*xs + m[0][1]*ys + m[0][2]*zs
	yd = m[1][0]*xs + m[1][1]*ys + m[1][2]*zs
	zd = m[2][0]*xs + m[2][1]*ys + m[2][2]*zs
	return
}

func FROM_D50_vonKries(xs, ys, zs float64) (xd, yd, zd float64) {
	INSERT_MATRIX_HERE
	xd = m[0][0]*xs + m[0][1]*ys + m[0][2]*zs
	yd = m[1][0]*xs + m[1][1]*ys + m[1][2]*zs
	zd = m[2][0]*xs + m[2][1]*ys + m[2][2]*zs
	return
}

func FROM_D50_Xyz(xs, ys, zs float64) (xd, yd, zd float64) {
	INSERT_MATRIX_HERE
	xd = m[0][0]*xs + m[0][1]*ys + m[0][2]*zs
	yd = m[1][0]*xs + m[1][1]*ys + m[1][2]*zs
	zd = m[2][0]*xs + m[2][1]*ys + m[2][2]*zs
	return
}

// FROM_D55 functions
func FROM_D55_Bradford(xs, ys, zs float64) (xd, yd, zd float64) {
	INSERT_MATRIX_HERE
	xd = m[0][0]*xs + m[0][1]*ys + m[0][2]*zs
	yd = m[1][0]*xs + m[1][1]*ys + m[1][2]*zs
	zd = m[2][0]*xs + m[2][1]*ys + m[2][2]*zs
	return
}

func FROM_D55_vonKries(xs, ys, zs float64) (xd, yd, zd float64) {
	INSERT_MATRIX_HERE
	xd = m[0][0]*xs + m[0][1]*ys + m[0][2]*zs
	yd = m[1][0]*xs + m[1][1]*ys + m[1][2]*zs
	zd = m[2][0]*xs + m[2][1]*ys + m[2][2]*zs
	return
}

func FROM_D55_Xyz(xs, ys, zs float64) (xd, yd, zd float64) {
	INSERT_MATRIX_HERE
	xd = m[0][0]*xs + m[0][1]*ys + m[0][2]*zs
	yd = m[1][0]*xs + m[1][1]*ys + m[1][2]*zs
	zd = m[2][0]*xs + m[2][1]*ys + m[2][2]*zs
	return
}

// FROM_D65 functions
func FROM_D65_Bradford(xs, ys, zs float64) (xd, yd, zd float64) {
	INSERT_MATRIX_HERE
	xd = m[0][0]*xs + m[0][1]*ys + m[0][2]*zs
	yd = m[1][0]*xs + m[1][1]*ys + m[1][2]*zs
	zd = m[2][0]*xs + m[2][1]*ys + m[2][2]*zs
	return
}

func FROM_D65_vonKries(xs, ys, zs float64) (xd, yd, zd float64) {
	INSERT_MATRIX_HERE
	xd = m[0][0]*xs + m[0][1]*ys + m[0][2]*zs
	yd = m[1][0]*xs + m[1][1]*ys + m[1][2]*zs
	zd = m[2][0]*xs + m[2][1]*ys + m[2][2]*zs
	return
}

func FROM_D65_Xyz(xs, ys, zs float64) (xd, yd, zd float64) {
	INSERT_MATRIX_HERE
	xd = m[0][0]*xs + m[0][1]*ys + m[0][2]*zs
	yd = m[1][0]*xs + m[1][1]*ys + m[1][2]*zs
	zd = m[2][0]*xs + m[2][1]*ys + m[2][2]*zs
	return
}

// FROM_D75 functions
func FROM_D75_Bradford(xs, ys, zs float64) (xd, yd, zd float64) {
	INSERT_MATRIX_HERE
	xd = m[0][0]*xs + m[0][1]*ys + m[0][2]*zs
	yd = m[1][0]*xs + m[1][1]*ys + m[1][2]*zs
	zd = m[2][0]*xs + m[2][1]*ys + m[2][2]*zs
	return
}

func FROM_D75_vonKries(xs, ys, zs float64) (xd, yd, zd float64) {
	INSERT_MATRIX_HERE
	xd = m[0][0]*xs + m[0][1]*ys + m[0][2]*zs
	yd = m[1][0]*xs + m[1][1]*ys + m[1][2]*zs
	zd = m[2][0]*xs + m[2][1]*ys + m[2][2]*zs
	return
}

func FROM_D75_Xyz(xs, ys, zs float64) (xd, yd, zd float64) {
	INSERT_MATRIX_HERE
	xd = m[0][0]*xs + m[0][1]*ys + m[0][2]*zs
	yd = m[1][0]*xs + m[1][1]*ys + m[1][2]*zs
	zd = m[2][0]*xs + m[2][1]*ys + m[2][2]*zs
	return
}

// FROM_E functions
func FROM_E_Bradford(xs, ys, zs float64) (xd, yd, zd float64) {
	INSERT_MATRIX_HERE
	xd = m[0][0]*xs + m[0][1]*ys + m[0][2]*zs
	yd = m[1][0]*xs + m[1][1]*ys + m[1][2]*zs
	zd = m[2][0]*xs + m[2][1]*ys + m[2][2]*zs
	return
}

func FROM_E_vonKries(xs, ys, zs float64) (xd, yd, zd float64) {
	INSERT_MATRIX_HERE
	xd = m[0][0]*xs + m[0][1]*ys + m[0][2]*zs
	yd = m[1][0]*xs + m[1][1]*ys + m[1][2]*zs
	zd = m[2][0]*xs + m[2][1]*ys + m[2][2]*zs
	return
}

func FROM_E_Xyz(xs, ys, zs float64) (xd, yd, zd float64) {
	INSERT_MATRIX_HERE
	xd = m[0][0]*xs + m[0][1]*ys + m[0][2]*zs
	yd = m[1][0]*xs + m[1][1]*ys + m[1][2]*zs
	zd = m[2][0]*xs + m[2][1]*ys + m[2][2]*zs
	return
}

// FROM_F2 functions
func FROM_F2_Bradford(xs, ys, zs float64) (xd, yd, zd float64) {
	INSERT_MATRIX_HERE
	xd = m[0][0]*xs + m[0][1]*ys + m[0][2]*zs
	yd = m[1][0]*xs + m[1][1]*ys + m[1][2]*zs
	zd = m[2][0]*xs + m[2][1]*ys + m[2][2]*zs
	return
}

func FROM_F2_vonKries(xs, ys, zs float64) (xd, yd, zd float64) {
	INSERT_MATRIX_HERE
	xd = m[0][0]*xs + m[0][1]*ys + m[0][2]*zs
	yd = m[1][0]*xs + m[1][1]*ys + m[1][2]*zs
	zd = m[2][0]*xs + m[2][1]*ys + m[2][2]*zs
	return
}

func FROM_F2_Xyz(xs, ys, zs float64) (xd, yd, zd float64) {
	INSERT_MATRIX_HERE
	xd = m[0][0]*xs + m[0][1]*ys + m[0][2]*zs
	yd = m[1][0]*xs + m[1][1]*ys + m[1][2]*zs
	zd = m[2][0]*xs + m[2][1]*ys + m[2][2]*zs
	return
}

// FROM_F7 functions
func FROM_F7_Bradford(xs, ys, zs float64) (xd, yd, zd float64) {
	INSERT_MATRIX_HERE
	xd = m[0][0]*xs + m[0][1]*ys + m[0][2]*zs
	yd = m[1][0]*xs + m[1][1]*ys + m[1][2]*zs
	zd = m[2][0]*xs + m[2][1]*ys + m[2][2]*zs
	return
}

func FROM_F7_vonKries(xs, ys, zs float64) (xd, yd, zd float64) {
	INSERT_MATRIX_HERE
	xd = m[0][0]*xs + m[0][1]*ys + m[0][2]*zs
	yd = m[1][0]*xs + m[1][1]*ys + m[1][2]*zs
	zd = m[2][0]*xs + m[2][1]*ys + m[2][2]*zs
	return
}

func FROM_F7_Xyz(xs, ys, zs float64) (xd, yd, zd float64) {
	INSERT_MATRIX_HERE
	xd = m[0][0]*xs + m[0][1]*ys + m[0][2]*zs
	yd = m[1][0]*xs + m[1][1]*ys + m[1][2]*zs
	zd = m[2][0]*xs + m[2][1]*ys + m[2][2]*zs
	return
}

// FROM_F11 functions
func FROM_F11_Bradford(xs, ys, zs float64) (xd, yd, zd float64) {
	INSERT_MATRIX_HERE
	xd = m[0][0]*xs + m[0][1]*ys + m[0][2]*zs
	yd = m[1][0]*xs + m[1][1]*ys + m[1][2]*zs
	zd = m[2][0]*xs + m[2][1]*ys + m[2][2]*zs
	return
}

func FROM_F11_vonKries(xs, ys, zs float64) (xd, yd, zd float64) {
	INSERT_MATRIX_HERE
	xd = m[0][0]*xs + m[0][1]*ys + m[0][2]*zs
	yd = m[1][0]*xs + m[1][1]*ys + m[1][2]*zs
	zd = m[2][0]*xs + m[2][1]*ys + m[2][2]*zs
	return
}

func FROM_F11_Xyz(xs, ys, zs float64) (xd, yd, zd float64) {
	INSERT_MATRIX_HERE
	xd = m[0][0]*xs + m[0][1]*ys + m[0][2]*zs
	yd = m[1][0]*xs + m[1][1]*ys + m[1][2]*zs
	zd = m[2][0]*xs + m[2][1]*ys + m[2][2]*zs
	return
}

